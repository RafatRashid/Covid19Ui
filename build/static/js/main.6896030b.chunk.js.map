{"version":3,"sources":["Components/DashboardCaseListComponent/DashboardCaseList.tsx","Components/DashboardTile.tsx","Helper/GraphHelper.ts","Components/HistoricalDataComponent/WorldWideChart.tsx","Helper/UrlHelper.ts","Pages/Footer/Footer.tsx","Pages/Navbar/Navbar.tsx","App.tsx","index.tsx"],"names":["DashboardCaseList","CaseList","className","map","country","cases","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","DashboardTile","todaysCount","total","classes","Card","variant","CardContent","Typography","color","BuildLineChart","data","curratedData","lastAffectedNumber","i","push","x","y","Number","HistoricalChart","useState","historicalData","setHistoricalData","datasets","label","fill","backgroundColor","borderColor","useEffect","a","fetch","response","json","jsonResponse","chartData","getHistoricalData","type","Line","options","legend","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","scales","xAxes","time","format","tooltipFormat","yAxes","gridLines","Footer","todaysDate","Date","toLocaleString","Navbar","allCountriesName","selectedCountry","onSelectedCountryChange","FormControl","Select","value","onChange","MenuItem","Code","Name","App","tileInfo","setTileInfo","countryNames","setCountryNames","summaryInfo","setSummaryInfo","allInformationByCountries","setAllInformations","setSelectedCountry","event","countryCode","target","getSummaryAsync","selectedCodeInfo","find","countryInfo","iso2","selectedCountryTileInfo","todayCases","deaths","todayDeaths","recovered","active","critical","todayRecovered","then","getAllInformationsByCountryAsync","sortedResponse","sort","countriesArray","Updated","updated","CountryInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6896030b.chunk.js","sourcesContent":["import \"./DashboardCaseStyle.css\";\nimport { FC } from \"react\";\nimport { ICountryInterface } from \"../../Interfaces/ICountryInterface\";\n\ninterface IDashboardCaseList {\n  CaseList: ICountryInterface[];\n}\n\nexport const DashboardCaseList: FC<IDashboardCaseList> = ({ CaseList }) => {\n  return (\n    <div className=\"caselist_table\">\n      <table>\n        <thead>\n          <tr>\n            <td>Country</td>\n            <td>Total Cases</td>\n          </tr>\n        </thead>\n        <tbody>\n          {CaseList.map(({ country, cases }) => (\n            <tr key={country}>\n              <td>{country}</td>\n              <td>\n                <strong>{cases}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Card, CardContent, makeStyles, Typography } from \"@material-ui/core\";\nimport { FC } from \"react\";\n\ninterface ITile {\n  title?: string;\n  todaysCount?: number;\n  total?: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 300,\n    // maxWidth: 350,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 5px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 30,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport const DashboardTile: FC<ITile> = ({ title, todaysCount, total }) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"primary\">\n          {title}\n        </Typography>\n        <h1>{todaysCount}</h1>\n        <Typography color=\"textSecondary\">{total} total</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n","import { IHistory, ILineGraph } from \"../Interfaces/IHistoricData\";\n\nexport const BuildLineChart = (data: IHistory[]) => {\n  let curratedData: ILineGraph[] = [];\n  let lastAffectedNumber: number = 0;\n\n  for (let i in data) {\n    if (lastAffectedNumber) {\n      curratedData.push({\n        x: i,\n        y: Number(data[i]) - lastAffectedNumber,\n      });\n    }\n\n    lastAffectedNumber = Number(data[i]);\n  }\n  return curratedData;\n};\n","import { FC, useEffect, useState } from \"react\";\nimport { WorldWideHistoricalUrl } from \"../../Helper/UrlHelper\";\nimport { BuildLineChart } from \"../../Helper/GraphHelper\";\nimport { Line } from \"react-chartjs-2\";\nimport { ILineGraph } from \"../../Interfaces/IHistoricData\";\n\nexport const HistoricalChart: FC = () => {\n  const [historicalData, setHistoricalData] = useState<ILineGraph[]>();\n\n  const options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n    },\n  };\n\n  const data: any = {\n    datasets: [\n      {\n        label: \"Affected Case\",\n        data: historicalData,\n        fill: false,\n        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n        borderColor: \"#CC1034\",\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const getHistoricalData = async () => {\n      const response = await fetch(WorldWideHistoricalUrl);\n      const jsonResponse = await response.json();\n\n      if (jsonResponse) {\n        const chartData = BuildLineChart(jsonResponse.cases);\n        setHistoricalData(chartData);\n      }\n    };\n    getHistoricalData();\n  }, []);\n\n  return (\n    <div>\n      {historicalData ? (\n        <Line type={Line} data={data} options={options} />\n      ) : (\n        \"Not Ready Yet\"\n      )}\n    </div>\n  );\n};\n","export const AllCountriesApiUrl =\n  \"https://corona.lmao.ninja/v2/countries?yesterday=&sort=\";\n\nexport const AllInfoUrl = \"https://corona.lmao.ninja/v2/all?yesterday\";\n\n\nexport const WorldWideHistoricalUrl = \"https://corona.lmao.ninja/v2/historical/all?lastdays=60\"\n","import \"./Footer.css\";\n\nexport const Footer = () => {\n  const todaysDate = new Date();\n  return (\n    <footer className=\"footer-distributed\">\n      <div className=\"footer-left\">\n        <p className=\"footer-company-name\">{todaysDate.toLocaleString()}</p>\n      </div>\n\n      <div className=\"footer-center\">\n        <p>Made With React + TS ✅ </p>\n      </div>\n    </footer>\n  );\n};\n","import { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { ICountryName } from \"../../Interfaces/ICountryName\";\nimport \"./Navbar.css\";\n\ninterface INavbar {\n  allCountriesName: ICountryName[];\n  selectedCountry: string;\n  onSelectedCountryChange: any;\n}\n\nexport const Navbar: FC<INavbar> = ({\n  allCountriesName,\n  selectedCountry,\n  onSelectedCountryChange,\n}) => {\n  return (\n    <div className=\"app_header\">\n      <h1 className=\"headerFont\">Covid 19 Dashboard</h1>\n      <FormControl>\n        <Select\n          variant=\"outlined\"\n          value={selectedCountry}\n          onChange={onSelectedCountryChange}\n        >\n          <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n          {allCountriesName.map((country) => (\n            <MenuItem key={country.Name} value={country.Code}>\n              {country.Name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n","import { Card, CardContent } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { DashboardCaseList } from \"./Components/DashboardCaseListComponent/DashboardCaseList\";\nimport { DashboardTile } from \"./Components/DashboardTile\";\nimport { HistoricalChart } from \"./Components/HistoricalDataComponent/WorldWideChart\";\nimport { AllCountriesApiUrl, AllInfoUrl } from \"./Helper/UrlHelper\";\nimport { ICountryInterface } from \"./Interfaces/ICountryInterface\";\nimport { ICountryName } from \"./Interfaces/ICountryName\";\nimport { IWorldWideInfo } from \"./Interfaces/IWorldWideInfo\";\nimport { Footer } from \"./Pages/Footer/Footer\";\nimport { Navbar } from \"./Pages/Navbar/Navbar\";\n\nfunction App() {\n  const [tileInfo, setTileInfo] = useState<IWorldWideInfo>();\n  const [countryNames, setCountryNames] = useState<ICountryName[]>([]);\n  const [summaryInfo, setSummaryInfo] = useState<IWorldWideInfo>();\n\n  const [allInformationByCountries, setAllInformations] = useState<\n    ICountryInterface[]\n  >([]);\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"worldwide\");\n\n  const onSelectedCountryChange = async (event: any) => {\n    const countryCode = event.target.value;\n    if (countryCode === \"worldwide\") {\n      if (summaryInfo) {\n        setTileInfo(summaryInfo);\n      } else {\n        await getSummaryAsync();\n      }\n    } else {\n      setSelectedCountry(countryCode);\n      const selectedCodeInfo = allInformationByCountries.find(\n        (y) => y.countryInfo.iso2 === countryCode\n      );\n\n      const selectedCountryTileInfo: IWorldWideInfo = {\n        cases: selectedCodeInfo?.cases,\n        todayCases: selectedCodeInfo?.todayCases,\n        deaths: selectedCodeInfo?.deaths,\n        todayDeaths: selectedCodeInfo?.todayDeaths,\n        recovered: selectedCodeInfo?.recovered,\n        active: selectedCodeInfo?.active,\n        critical: selectedCodeInfo?.critical,\n        todayRecovered: selectedCodeInfo?.todayRecovered,\n      };\n\n      setTileInfo(selectedCountryTileInfo);\n    }\n  };\n  const getSummaryAsync = async () => {\n    await fetch(AllInfoUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        setTileInfo(data);\n        setSummaryInfo(data);\n      });\n  };\n\n  const getAllInformationsByCountryAsync = async () => {\n    await fetch(AllCountriesApiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        var sortedResponse = data.sort();\n        setAllInformations(sortedResponse);\n        const countriesArray = sortedResponse.map((x: ICountryInterface) => ({\n          Name: x.country,\n          Code: x.countryInfo.iso2,\n          Updated: x.updated,\n          CountryInfo: x.countryInfo,\n        }));\n        setCountryNames(countriesArray);\n      });\n  };\n\n  useEffect(() => {\n    getAllInformationsByCountryAsync();\n    getSummaryAsync();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"app\">\n        <div className=\"left_container\">\n          <Navbar\n            allCountriesName={countryNames}\n            selectedCountry={selectedCountry}\n            onSelectedCountryChange={onSelectedCountryChange}\n          />\n          <div className=\"app_stats\">\n            <DashboardTile\n              title=\"Affected Cases\"\n              todaysCount={tileInfo?.todayCases}\n              total={tileInfo?.cases}\n            />\n            <DashboardTile\n              title=\"Deaths\"\n              todaysCount={tileInfo?.todayDeaths}\n              total={tileInfo?.deaths}\n            />\n            <DashboardTile\n              title=\"Recovered\"\n              todaysCount={tileInfo?.recovered}\n              total={tileInfo?.recovered}\n            />\n          </div>\n        </div>\n        <div className=\"right_container\">\n          <Card>\n            <CardContent>\n              <h4>Cases List by Country</h4>\n              <DashboardCaseList CaseList={allInformationByCountries} />\n              <h4>World Wide New Cases</h4>\n              <HistoricalChart />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}